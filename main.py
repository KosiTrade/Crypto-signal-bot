import os
import time
import threading
import logging
import requests
import pandas as pd
import ta
import ccxt  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å coxt –Ω–∞ ccxt
from telegram import Bot
from flask import Flask

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

@app.route('/')
def health_check():
    return "KosiTrade Operational", 200

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TOKEN or not CHAT_ID:
    logger.error("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    raise ValueError("–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
try:
    bot = Bot(token=TOKEN)
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
    raise

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ Binance)
SYMBOLS = [
    "FLOKIUSDT", "DOGEUSDT", "PEPEUSDT",
    "SHIBUSDT", "1000BONKUSDT", "WIFUSDT",
    "1000SATSUSDT"  # –£–±—Ä–∞–Ω—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–∫–µ—Ä—ã
]

def fetch_candle_data(symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance API"""
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval=5m&limit=100"
    
    try:
        # –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ 451
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
            "X-MBX-APIKEY": os.getenv("BINANCE_API_KEY", "")
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        
        data = response.json()
        if not isinstance(data, list):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API")
            
        df = pd.DataFrame(data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_asset_volume', 'trades',
            'taker_buy_base', 'taker_buy_quote', 'ignore'
        ])
        
        numeric_cols = ['open', 'high', 'low', 'close', 'volume']
        df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors='coerce')
        
        return df.dropna()
        
    except Exception as e:
        logger.error(f"üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)[:100]}...")
        return None

def analyze_market(df):
    """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if df is None or df.empty:
        return 0, 0.0
        
    try:
        df['rsi'] = ta.momentum.RSIIndicator(df['close']).rsi()
        df['ema20'] = ta.trend.EMAIndicator(df['close'], 20).ema_indicator()
        df['macd'] = ta.trend.MACD(df['close']).macd_diff()
        
        latest = df.iloc[-1]
        score = sum([
            latest['rsi'] < 35,
            latest['close'] > latest['ema20'],
            latest['macd'] > latest['macd'].shift(1),
            latest['volume'] > df['volume'].rolling(20).mean().iloc[-1] * 1.2
        ])
        
        return score, round(latest['close'], 6)
        
    except Exception as e:
        logger.error(f"üîß –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return 0, 0.0

def send_alert(symbol, score, price):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram"""
    try:
        message = (
            f"üöÄ **–°–∏–≥–Ω–∞–ª KosiTrade**\n"
            f"‚ñ´Ô∏è –ú–æ–Ω–µ—Ç–∞: {symbol}\n"
            f"‚ñ´Ô∏è –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {score}/4\n"
            f"‚ñ´Ô∏è –¶–µ–Ω–∞: ${price}\n"
            f"‚ñ´Ô∏è –í—Ä–µ–º—è: {time.strftime('%H:%M:%S %d.%m.%Y')}"
        )
        bot.send_message(
            chat_id=CHAT_ID,
            text=message,
            parse_mode='Markdown'
        )
        time.sleep(1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    except Exception as e:
        logger.error(f"üì° –û—à–∏–±–∫–∞ Telegram: {e}")

def trading_engine():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞")
    
    try:
        bot.send_message(CHAT_ID, "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    while True:
        try:
            for symbol in SYMBOLS:
                try:
                    df = fetch_candle_data(symbol)
                    if df is None:
                        continue
                        
                    score, price = analyze_market(df)
                    
                    if score >= 3:
                        send_alert(symbol, score, price)
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                    
                time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                
            time.sleep(300)  # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")
            break
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            time.sleep(60)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=trading_engine, daemon=True).start()
    
    # –ó–∞–ø—É—Å–∫ Flask
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)
